package com.experis.de.MeFit.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.DynamicUpdate;

import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@DynamicUpdate
@Table(name = "Exercise")
@Schema(description = "Exercise Model")
public  @Getter
        @Setter
        @RequiredArgsConstructor
        class Exercise {

    //autogenerated ID which never has to be defined in future functions.
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //Here the static components of the model
    @Column(name="name",
            nullable = false,
            columnDefinition = "TEXT")
    private String name;

    @Column(name="description",
            nullable = false,
            columnDefinition = "TEXT")
    private String description;

    //related data
    //exercise - workouts -binding
    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH})
    @JoinTable(
            name="exercise_workouts",
            joinColumns = {@JoinColumn(name="exercise_id")},
            inverseJoinColumns = {@JoinColumn(name="workout_id")}
    )
    private Set<Workout> workouts = new HashSet<>();

    //to regulate the output only a List of the programIDs will be returned
    @JsonGetter("workouts")
    public List<String> workoutsGetter() {
        if(workouts != null){
            return workouts.stream()
                    .map(workout -> {
                        return "/api/v1/workouts/" + workout.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }


    //related data
    //workout - muscleGroup - relation
    @ManyToOne(cascade = {/*CascadeType.ALL, */CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH})
    @JoinColumn(name="muscleGroup_id")
    private MuscleGroup muscleGroup;

    //restricts the output to the muscle group ID
    @JsonGetter("muscleGroup")
    public String muscleGroup() {
        if(muscleGroup != null){
            return "/api/v1/muscleGroup/" + muscleGroup.getId();
        }else{
            return null;
        }
    }

}
